@model LexiconLMS.Models.RegisterDocumentModel

@{
    ViewBag.Title = "UpLoad a Document";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm("AddDocument", "Documents", FormMethod.Post, new {  @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @*<table>
            <tr>
                <td>
                    <input type="file" name="document" />
                </td>
                <td>
                    <input type="submit" id="bttn_Upload" value="Upload" />
                </td>
            </tr>
        </table>*@

    @*if (Session["document"] != null)
        {
            <div class="upload">
                <div style="width: 500px;">
                    <table id="uloadTable" border="1">*@

    @*<thead>
            <tr>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>*@


    @* Adds the table with uploaded files. Not implemented //2016-07-07 / George C. *@
    @*<tbody>
            @foreach (var item in (List<LexiconLMS.Models.Document>)Session["document"])
        {
                <tr id="@item.Name">
                    <td>@item.Name</td>
                    <td style="text-align: center">
                        <a class="viewc" href="@Url.Action("OpenFile", "FileUpload", new { @fileName = item.Name })">
                            <img width="16" height="16" border="0" src="~/Images/view.jpg" class="viewc">
                        </a>
                        <a class="viewc" href="">
                            <img width="16" height="16" border="0" src="~/Images/Upload2.jpg" class="link">
                        </a>
                    </td>
                </tr>
            }
        </tbody>*@


    @*</table>
            </div>
        </div>*@
    @*}*@

    <div class="form-horizontal">
        <h4>Add a Document</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.DocumentType, "Doc Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(m => m.DocumentType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.DocumentType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">

            <input type="file" name="UploadedFile" />
            @*@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })*@

            <div class="col-md-10">
                @*@Html.TextBoxFor(model => model.UploadedFile, new { @type = "file", @name= "UploadedFile" })*@
                @*@{string fileName = Model.Name; }
                @Html.DisplayFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.EditorFor(model => model.Name)*@

                @*@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="form-group hidden">
            @*@{string destinationPath = Model.FilePath; }*@

            @Html.LabelFor(model => model.FilePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(modelFilePath => destinationPath, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.EditorFor(model => model.FilePath, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FilePath, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group hidden">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CourseId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
            </div>
        </div>
        @*</div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.CourseId)
                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group hidden">
            @Html.LabelFor(model => model.ModuleId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModuleId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.ActivityId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActivityId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActivityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @*<input type="submit" value="Add" class="btn btn-default" />*@
                <input type="submit" id="bttn_Upload" value="Upload" />
            </div>
        </div>
    </div>
                }

<div>
    @if (Model.CourseId > 0)
    {
        @Html.ActionLink("Back", "CourseDetails/" + Model.CourseId.ToString(), "Courses")
    }


    @if (Model.ModuleId > 0)
    {
        @Html.ActionLink("Back", "ModuleDetails/" + Model.ModuleId.ToString(), "Modules")
    }


    @if (Model.ActivityId > 0)
    {
        @Html.ActionLink("Back", "ActivityDetails/" + Model.ActivityId.ToString(), "Activities")
    }
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
